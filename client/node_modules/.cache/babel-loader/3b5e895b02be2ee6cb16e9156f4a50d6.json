{"ast":null,"code":"var _jsxFileName = \"/Users/alexandersuarez/code/weather-data/client/src/pages/Home.js\";\nimport React, { useState } from 'react';\nimport ReactMapGL from \"react-map-gl\";\nimport API from \"../utils/API\";\nimport Card from \"../components/Card\";\nimport MapMarkerImage from \"../components/MapMarkerImage\";\nimport NavbarComponent from '../components/NavbarComponent';\nimport { toHtml } from '@fortawesome/fontawesome-svg-core';\nconst RANDOM_NUMBER_KEY = process.env.REACT_APP_RANDOM_API_KEY;\nconst RANDOM_REF_KEY = process.env.REACT_APP_RANDOM_API_REF;\n\nfunction Home() {\n  // Setting the state\n  const [markerCount, setMarkerCount] = useState([]);\n  const [selectedMarker, setSelectedMarker] = useState({});\n  const [searchField, setSearchField] = useState();\n  const [viewport, setViewPort] = useState({\n    // Setting the inital view of the map\n    latitude: 35.5501,\n    longitude: -80.7821,\n    zoom: 1,\n    width: '100vw',\n    height: '60vh'\n  }); // Functions \n  // =====================================================\n  // Grabs the value that was put into the searchbar and sets the state of the searchField to what was typed into the searchbar\n\n  function handleInputChange(e) {\n    const {\n      value\n    } = e.target;\n    setSearchField(value);\n  } // Upon the user clicking the 'Search' button use the prevent default to avoid the page refreshing. Then we \n\n\n  async function handleFormSubmit(e) {\n    e.preventDefault();\n    const {\n      value\n    } = e.target;\n    setSearchField(value); // ========================\n\n    weatherSearch();\n  }\n\n  async function weatherSearch() {\n    console.log('searchField: ', searchField); // Takes the value that was put into the searchfiled and returns that many lat and lon points\n\n    const count = await fetch(`https://randomapi.com/api/?key=${RANDOM_NUMBER_KEY}&ref=${RANDOM_REF_KEY}&results=${searchField}&page=${Math.ceil(searchField / 10)}`); // Converts the response to a json\n\n    const toJson = await count.json();\n    console.log('toJson: ', toJson); // grab the results key from the json object\n\n    const latAndLon = await toJson.results;\n    console.log('latAndLon: ', latAndLon); // then it will set the state of the MarkerCount to generate that many weather markers on the map. MakerCount is passed as props to the MapMarkerImage component and for every lat and lon point it will generate an image\n\n    setMarkerCount(latAndLon);\n  }\n\n  function onMarkerSelect(marker) {\n    // when user selects an image generated from the MapMarkerImage component an API call will be made to the Open weather API to get the weather data from those specific lat and long locations. \n    API.searchWeather(marker.lat, marker.lon).then(res => {\n      // Then we will pass the weather data for that specific image that was clicked to the selectedMarker state.\n      setSelectedMarker(res.data);\n    });\n  } // ====================================================\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(NavbarComponent, {\n    handleInputChange: handleInputChange,\n    handleFormSubmit: handleFormSubmit,\n    searchField: searchField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(ReactMapGL, Object.assign({}, viewport, {\n    mapStyle: \"mapbox://styles/suarez9093/ck773vm2e08i91iqi1m48zfss\",\n    mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_API_KEY,\n    onViewportChange: setViewPort,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(MapMarkerImage, {\n    onMarkerSelect: onMarkerSelect,\n    markerCount: markerCount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(Card, {\n    selectedMarker: selectedMarker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n}\n\n;\nexport default Home;","map":{"version":3,"sources":["/Users/alexandersuarez/code/weather-data/client/src/pages/Home.js"],"names":["React","useState","ReactMapGL","API","Card","MapMarkerImage","NavbarComponent","toHtml","RANDOM_NUMBER_KEY","process","env","REACT_APP_RANDOM_API_KEY","RANDOM_REF_KEY","REACT_APP_RANDOM_API_REF","Home","markerCount","setMarkerCount","selectedMarker","setSelectedMarker","searchField","setSearchField","viewport","setViewPort","latitude","longitude","zoom","width","height","handleInputChange","e","value","target","handleFormSubmit","preventDefault","weatherSearch","console","log","count","fetch","Math","ceil","toJson","json","latAndLon","results","onMarkerSelect","marker","searchWeather","lat","lon","then","res","data","REACT_APP_MAPBOX_API_KEY"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactMapGL from \"react-map-gl\"\nimport API from \"../utils/API\"\nimport Card from \"../components/Card\"\nimport MapMarkerImage from \"../components/MapMarkerImage\"\nimport NavbarComponent from '../components/NavbarComponent'\nimport { toHtml } from '@fortawesome/fontawesome-svg-core';\nconst RANDOM_NUMBER_KEY = process.env.REACT_APP_RANDOM_API_KEY\nconst RANDOM_REF_KEY = process.env.REACT_APP_RANDOM_API_REF\n\n\nfunction Home() {\n  // Setting the state\n  const [markerCount, setMarkerCount] = useState([])\n  const [selectedMarker, setSelectedMarker] = useState({})\n  const [searchField, setSearchField] = useState()\n  const [viewport, setViewPort] = useState({\n    // Setting the inital view of the map\n    latitude: 35.5501,\n    longitude: -80.7821,\n    zoom: 1,\n    width: '100vw',\n    height: '60vh'\n  })\n\n  // Functions \n  // =====================================================\n\n  // Grabs the value that was put into the searchbar and sets the state of the searchField to what was typed into the searchbar\n  function handleInputChange(e) {\n    const { value } = e.target\n    setSearchField(value)\n  }\n\n  // Upon the user clicking the 'Search' button use the prevent default to avoid the page refreshing. Then we \n  async function handleFormSubmit(e) {\n    e.preventDefault()\n\n    const { value } = e.target\n     setSearchField(value)\n    // ========================\n     weatherSearch()\n  }\n\n\n  async function weatherSearch() {\n    console.log('searchField: ',searchField)\n  // Takes the value that was put into the searchfiled and returns that many lat and lon points\n    const count = await fetch(`https://randomapi.com/api/?key=${RANDOM_NUMBER_KEY}&ref=${RANDOM_REF_KEY}&results=${searchField}&page=${Math.ceil(searchField / 10)}`)\n    // Converts the response to a json\n    const toJson = await count.json()\n    console.log('toJson: ',toJson)\n    // grab the results key from the json object\n    const latAndLon = await toJson.results\n    console.log('latAndLon: ',latAndLon)\n    // then it will set the state of the MarkerCount to generate that many weather markers on the map. MakerCount is passed as props to the MapMarkerImage component and for every lat and lon point it will generate an image\n    setMarkerCount(latAndLon)\n  }\n  \n  function onMarkerSelect(marker) {\n    // when user selects an image generated from the MapMarkerImage component an API call will be made to the Open weather API to get the weather data from those specific lat and long locations. \n    API.searchWeather(marker.lat, marker.lon)\n      .then(res => {\n        // Then we will pass the weather data for that specific image that was clicked to the selectedMarker state.\n        setSelectedMarker(res.data)\n      })\n  }\n  // ====================================================\n  return (\n    <div>\n      {/* Renders the Navbar component and passes the handleInputChange, handleFormSubmit functions and the searchField state value to the component */}\n      <NavbarComponent\n        handleInputChange={handleInputChange}\n        handleFormSubmit={handleFormSubmit}\n        searchField={searchField}\n      />\n      {/* Renders the ReactMapGL from react-map-gl */}\n      <ReactMapGL\n        {...viewport}\n        mapStyle={\"mapbox://styles/suarez9093/ck773vm2e08i91iqi1m48zfss\"}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API_KEY}\n        onViewportChange={setViewPort}\n      >\n        {/* Renders cloud images to the map */}\n        <MapMarkerImage\n          onMarkerSelect={onMarkerSelect}\n          markerCount={markerCount}\n        />\n      </ReactMapGL>\n\n      {/* Renders the weather data detail of the selected weather Marker */}\n      <Card selectedMarker={selectedMarker} />\n    </div>\n  )\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}