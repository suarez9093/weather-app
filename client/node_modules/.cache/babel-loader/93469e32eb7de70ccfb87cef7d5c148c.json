{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alexandersuarez/code/weather-data/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alexandersuarez/code/weather-data/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/alexandersuarez/code/weather-data/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import API from'../utils/API';import{Card,CardText,CardBody,Button}from'reactstrap';import NavbarComponent from'../components/NavbarComponent';function SavedWeatherPoints(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),savedWeather=_useState2[0],setSavedWeather=_useState2[1];// on first render load run the loadWeather function\nuseEffect(function(){loadWeather();},[]);// Makes a call to axios to get all the weather that was saved and save to savedWeather state.\nfunction loadWeather(){return _loadWeather.apply(this,arguments);}// make an axios call to delete a weather point\nfunction _loadWeather(){_loadWeather=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return API.getAllWeather();case 2:result=_context.sent;setSavedWeather(result.data);case 4:case\"end\":return _context.stop();}}},_callee);}));return _loadWeather.apply(this,arguments);}function handleDeleteWeather(id){API.deleteWeather(id).then(function(res){loadWeather();});alert('Deleted!');};console.log('savedWeather: ',savedWeather);return React.createElement(\"div\",null,React.createElement(NavbarComponent,null),!savedWeather?React.createElement(\"h1\",null,\"No saved Results\"):// otherwise the component will map over all the savedWeather saved in state and for everyone in the array it will generate a Card with the following information\nsavedWeather.map(function(weather){return React.createElement(Card,{key:weather._id},React.createElement(CardBody,null,React.createElement(CardText,null,React.createElement(\"strong\",null,\"Country:\"),\" \",!weather.country?'N/A':weather.country),React.createElement(CardText,null,React.createElement(\"strong\",null,\"City:\"),\" \",!weather.city?'N/A':weather.city),React.createElement(CardText,null,React.createElement(\"strong\",null,\"Temp:\"),\" \",((weather.temp-273.15)*1.8+32).toFixed(2),\"\\xB0\"),React.createElement(CardText,null,React.createElement(\"strong\",null,\"Feels Like:\"),\" \",((weather.feelsLike-273.15)*1.8+32).toFixed(2),\"\\xB0\"),React.createElement(CardText,null,React.createElement(\"strong\",null,\"Latitude:\"),\" \",weather.latitude,\" \"),React.createElement(CardText,null,React.createElement(\"strong\",null,\"Longitude:\"),\" \",weather.longitude,\" \"),React.createElement(\"br\",null),React.createElement(\"br\",null),React.createElement(Button,{className:\"btn-width\",color:\"danger\",onClick:function onClick(){return handleDeleteWeather(weather._id);}},\"Delete this weather point\")));}));}export default SavedWeatherPoints;","map":{"version":3,"sources":["/Users/alexandersuarez/code/weather-data/client/src/pages/SavedWeatherPoints.js"],"names":["React","useState","useEffect","API","Card","CardText","CardBody","Button","NavbarComponent","SavedWeatherPoints","savedWeather","setSavedWeather","loadWeather","getAllWeather","result","data","handleDeleteWeather","id","deleteWeather","then","res","alert","console","log","map","weather","_id","country","city","temp","toFixed","feelsLike","latitude","longitude"],"mappings":"mYAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,GAAP,KAAgB,cAAhB,CACA,OAASC,IAAT,CAAeC,QAAf,CAAyBC,QAAzB,CAAmCC,MAAnC,KAAiD,YAAjD,CACA,MAAOC,CAAAA,eAAP,KAA4B,+BAA5B,CAEA,QAASC,CAAAA,kBAAT,EAA8B,eACcR,QAAQ,EADtB,wCACnBS,YADmB,eACLC,eADK,eAG1B;AACAT,SAAS,CAAC,UAAM,CACZU,WAAW,GACd,CAFQ,CAEN,EAFM,CAAT,CAIA;AAR0B,QASXA,CAAAA,WATW,8CAc1B;AAd0B,6FAS1B,oKACyBT,CAAAA,GAAG,CAACU,aAAJ,EADzB,QACUC,MADV,eAEIH,eAAe,CAACG,MAAM,CAACC,IAAR,CAAf,CAFJ,sDAT0B,8CAe1B,QAASC,CAAAA,mBAAT,CAA6BC,EAA7B,CAAiC,CAC7Bd,GAAG,CAACe,aAAJ,CAAkBD,EAAlB,EAAsBE,IAAtB,CAA2B,SAAAC,GAAG,CAAI,CAC9BR,WAAW,GACd,CAFD,EAGAS,KAAK,CAAC,UAAD,CAAL,CACH,EACDC,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA8Bb,YAA9B,EACA,MACI,gCACI,oBAAC,eAAD,MADJ,CAGK,CAACA,YAAD,CAAgB,iDAAhB,CACG;AACAA,YAAY,CAACc,GAAb,CAAiB,SAAAC,OAAO,QACpB,qBAAC,IAAD,EAAM,GAAG,CAAEA,OAAO,CAACC,GAAnB,EACI,oBAAC,QAAD,MACI,oBAAC,QAAD,MAAU,6CAAV,KAAqC,CAACD,OAAO,CAACE,OAAT,CAAmB,KAAnB,CAA2BF,OAAO,CAACE,OAAxE,CADJ,CAEI,oBAAC,QAAD,MAAU,0CAAV,KAAkC,CAACF,OAAO,CAACG,IAAT,CAAgB,KAAhB,CAAwBH,OAAO,CAACG,IAAlE,CAFJ,CAII,oBAAC,QAAD,MAAU,0CAAV,KAAkC,CAAE,CAACH,OAAO,CAACI,IAAR,CAAe,MAAhB,EAA0B,GAA3B,CAAkC,EAAnC,EAAuCC,OAAvC,CAA+C,CAA/C,CAAlC,QAJJ,CAKI,oBAAC,QAAD,MAAU,gDAAV,KAAwC,CAAE,CAACL,OAAO,CAACM,SAAR,CAAoB,MAArB,EAA+B,GAAhC,CAAuC,EAAxC,EAA4CD,OAA5C,CAAoD,CAApD,CAAxC,QALJ,CAMI,oBAAC,QAAD,MAAU,8CAAV,KAAsCL,OAAO,CAACO,QAA9C,KANJ,CAOI,oBAAC,QAAD,MAAU,+CAAV,KAAuCP,OAAO,CAACQ,SAA/C,KAPJ,CAQI,8BARJ,CASI,8BATJ,CAUI,oBAAC,MAAD,EAAQ,SAAS,CAAC,WAAlB,CAA8B,KAAK,CAAC,QAApC,CAA6C,OAAO,CAAE,yBAAMjB,CAAAA,mBAAmB,CAACS,OAAO,CAACC,GAAT,CAAzB,EAAtD,8BAVJ,CADJ,CADoB,EAAxB,CALR,CADJ,CAwBH,CACD,cAAejB,CAAAA,kBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport API from '../utils/API';\nimport { Card, CardText, CardBody, Button } from 'reactstrap';\nimport NavbarComponent from '../components/NavbarComponent';\n\nfunction SavedWeatherPoints() {\n    const [savedWeather, setSavedWeather] = useState()\n\n    // on first render load run the loadWeather function\n    useEffect(() => {\n        loadWeather()\n    }, [])\n\n    // Makes a call to axios to get all the weather that was saved and save to savedWeather state.\n    async function loadWeather() {\n        const result = await API.getAllWeather()\n        setSavedWeather(result.data)\n    }\n\n    // make an axios call to delete a weather point\n    function handleDeleteWeather(id) {\n        API.deleteWeather(id).then(res => {\n            loadWeather();\n        })\n        alert('Deleted!')\n    };\n    console.log('savedWeather: ', savedWeather)\n    return (\n        <div>\n            <NavbarComponent />\n            {/* If there is no weather points saved in state then component will render this h1 tag */}\n            {!savedWeather ? <h1>No saved Results</h1> :\n                // otherwise the component will map over all the savedWeather saved in state and for everyone in the array it will generate a Card with the following information\n                savedWeather.map(weather => (\n                    <Card key={weather._id}>\n                        <CardBody>\n                            <CardText><strong>Country:</strong> {!weather.country ? 'N/A' : weather.country}</CardText>\n                            <CardText><strong>City:</strong> {!weather.city ? 'N/A' : weather.city}</CardText>\n                            {/* Converts to farenheight */}\n                            <CardText><strong>Temp:</strong> {(((weather.temp - 273.15) * 1.8) + 32).toFixed(2)}°</CardText>\n                            <CardText><strong>Feels Like:</strong> {(((weather.feelsLike - 273.15) * 1.8) + 32).toFixed(2)}°</CardText>\n                            <CardText><strong>Latitude:</strong> {weather.latitude} </CardText>\n                            <CardText><strong>Longitude:</strong> {weather.longitude} </CardText>\n                            <br />\n                            <br />\n                            <Button className=\"btn-width\" color=\"danger\" onClick={() => handleDeleteWeather(weather._id)}>Delete this weather point</Button>\n                        </CardBody>\n                    </Card>\n                ))}\n        </div>\n    )\n}\nexport default SavedWeatherPoints"]},"metadata":{},"sourceType":"module"}