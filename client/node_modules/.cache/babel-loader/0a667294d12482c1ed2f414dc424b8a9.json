{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alexandersuarez/code/weather-data/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alexandersuarez/code/weather-data/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/alexandersuarez/code/weather-data/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import ReactMapGL from\"react-map-gl\";import API from\"../utils/API\";import Card from\"../components/Card\";import MapMarkerImage from\"../components/MapMarkerImage\";import NavbarComponent from'../components/NavbarComponent';var RANDOM_NUMBER_KEY=process.env.REACT_APP_RANDOM_API_KEY;var RANDOM_REF_KEY=process.env.REACT_APP_RANDOM_API_REF;function Home(){// Setting the state\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),markerCount=_useState2[0],setMarkerCount=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),selectedMarker=_useState4[0],setSelectedMarker=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),searchField=_useState6[0],setSearchField=_useState6[1];var _useState7=useState({// Setting the inital view of the map\nlatitude:35.5501,longitude:-80.7821,zoom:1,width:'100vw',height:'60vh'}),_useState8=_slicedToArray(_useState7,2),viewport=_useState8[0],setViewPort=_useState8[1];// Functions \n// =====================================================\n// Grabs the value that was put into the searchbar and sets the state of the searchField to what was typed into the searchbar\nfunction handleInputChange(e){var value=e.target.value;setSearchField(value);}// Upon the user clicking the 'Search' button use the prevent default to avoid the page refreshing. Then we \nfunction handleFormSubmit(_x){return _handleFormSubmit.apply(this,arguments);}function _handleFormSubmit(){_handleFormSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var value;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();value=e.target.value;setSearchField(value);// ========================\nweatherSearch();case 4:case\"end\":return _context.stop();}}},_callee);}));return _handleFormSubmit.apply(this,arguments);}function weatherSearch(){return _weatherSearch.apply(this,arguments);}function _weatherSearch(){_weatherSearch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var count,toJson,latAndLon;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log('searchField: ',searchField);// Takes the value that was put into the searchfiled and returns that many lat and lon points\n_context2.next=3;return fetch(\"https://randomapi.com/api/?key=\".concat(RANDOM_NUMBER_KEY,\"&ref=\").concat(RANDOM_REF_KEY,\"&results=\").concat(searchField,\"&page=10\"));case 3:count=_context2.sent;_context2.next=6;return count.json();case 6:toJson=_context2.sent;console.log('toJson: ',toJson);// grab the results key from the json object\n_context2.next=10;return toJson.results;case 10:latAndLon=_context2.sent;console.log('latAndLon: ',latAndLon);// then it will set the state of the MarkerCount to generate that many weather markers on the map. MakerCount is passed as props to the MapMarkerImage component and for every lat and lon point it will generate an image\nsetMarkerCount(latAndLon);case 13:case\"end\":return _context2.stop();}}},_callee2);}));return _weatherSearch.apply(this,arguments);}function onMarkerSelect(marker){// when user selects an image generated from the MapMarkerImage component an API call will be made to the Open weather API to get the weather data from those specific lat and long locations. \nAPI.searchWeather(marker.lat,marker.lon).then(function(res){// Then we will pass the weather data for that specific image that was clicked to the selectedMarker state.\nsetSelectedMarker(res.data);});}// ====================================================\nreturn React.createElement(\"div\",null,React.createElement(NavbarComponent,{handleInputChange:handleInputChange,handleFormSubmit:handleFormSubmit,searchField:searchField}),React.createElement(ReactMapGL,Object.assign({},viewport,{mapStyle:\"mapbox://styles/suarez9093/ck773vm2e08i91iqi1m48zfss\",mapboxApiAccessToken:process.env.REACT_APP_MAPBOX_API_KEY,onViewportChange:setViewPort}),React.createElement(MapMarkerImage,{onMarkerSelect:onMarkerSelect,markerCount:markerCount})),React.createElement(Card,{selectedMarker:selectedMarker}));};export default Home;","map":{"version":3,"sources":["/Users/alexandersuarez/code/weather-data/client/src/pages/Home.js"],"names":["React","useState","ReactMapGL","API","Card","MapMarkerImage","NavbarComponent","RANDOM_NUMBER_KEY","process","env","REACT_APP_RANDOM_API_KEY","RANDOM_REF_KEY","REACT_APP_RANDOM_API_REF","Home","markerCount","setMarkerCount","selectedMarker","setSelectedMarker","searchField","setSearchField","latitude","longitude","zoom","width","height","viewport","setViewPort","handleInputChange","e","value","target","handleFormSubmit","preventDefault","weatherSearch","console","log","fetch","count","json","toJson","results","latAndLon","onMarkerSelect","marker","searchWeather","lat","lon","then","res","data","REACT_APP_MAPBOX_API_KEY"],"mappings":"mYAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,GAAP,KAAgB,cAAhB,CACA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CACA,MAAOC,CAAAA,cAAP,KAA2B,8BAA3B,CACA,MAAOC,CAAAA,eAAP,KAA4B,+BAA5B,CACA,GAAMC,CAAAA,iBAAiB,CAAGC,OAAO,CAACC,GAAR,CAAYC,wBAAtC,CACA,GAAMC,CAAAA,cAAc,CAAGH,OAAO,CAACC,GAAR,CAAYG,wBAAnC,CAEA,QAASC,CAAAA,IAAT,EAAgB,CACd;AADc,cAEwBZ,QAAQ,CAAC,EAAD,CAFhC,wCAEPa,WAFO,eAEMC,cAFN,8BAG8Bd,QAAQ,CAAC,EAAD,CAHtC,yCAGPe,cAHO,eAGSC,iBAHT,8BAIwBhB,QAAQ,EAJhC,yCAIPiB,WAJO,eAIMC,cAJN,8BAKkBlB,QAAQ,CAAC,CACvC;AACAmB,QAAQ,CAAE,OAF6B,CAGvCC,SAAS,CAAE,CAAC,OAH2B,CAIvCC,IAAI,CAAE,CAJiC,CAKvCC,KAAK,CAAE,OALgC,CAMvCC,MAAM,CAAE,MAN+B,CAAD,CAL1B,yCAKPC,QALO,eAKGC,WALH,eAcd;AACA;AAEA;AACA,QAASC,CAAAA,iBAAT,CAA2BC,CAA3B,CAA8B,IACpBC,CAAAA,KADoB,CACVD,CAAC,CAACE,MADQ,CACpBD,KADoB,CAE5BV,cAAc,CAACU,KAAD,CAAd,CACD,CAED;AAvBc,QAwBCE,CAAAA,gBAxBD,4JAwBd,iBAAgCH,CAAhC,4HACEA,CAAC,CAACI,cAAF,GAEQH,KAHV,CAGoBD,CAAC,CAACE,MAHtB,CAGUD,KAHV,CAIGV,cAAc,CAACU,KAAD,CAAd,CACD;AACCI,aAAa,GANhB,sDAxBc,2DAkCCA,CAAAA,aAlCD,iJAkCd,mKACEC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA4BjB,WAA5B,EACF;AAFA,uBAGsBkB,CAAAA,KAAK,0CAAmC7B,iBAAnC,iBAA4DI,cAA5D,qBAAsFO,WAAtF,aAH3B,QAGQmB,KAHR,uCAKuBA,CAAAA,KAAK,CAACC,IAAN,EALvB,QAKQC,MALR,gBAMEL,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAuBI,MAAvB,EACA;AAPF,wBAQ0BA,CAAAA,MAAM,CAACC,OARjC,SAQQC,SARR,gBASEP,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA0BM,SAA1B,EACA;AACA1B,cAAc,CAAC0B,SAAD,CAAd,CAXF,yDAlCc,gDAgDd,QAASC,CAAAA,cAAT,CAAwBC,MAAxB,CAAgC,CAC9B;AACAxC,GAAG,CAACyC,aAAJ,CAAkBD,MAAM,CAACE,GAAzB,CAA8BF,MAAM,CAACG,GAArC,EACGC,IADH,CACQ,SAAAC,GAAG,CAAI,CACX;AACA/B,iBAAiB,CAAC+B,GAAG,CAACC,IAAL,CAAjB,CACD,CAJH,EAKD,CACD;AACA,MACE,gCAEE,oBAAC,eAAD,EACE,iBAAiB,CAAEtB,iBADrB,CAEE,gBAAgB,CAAEI,gBAFpB,CAGE,WAAW,CAAEb,WAHf,EAFF,CAQE,oBAAC,UAAD,kBACMO,QADN,EAEE,QAAQ,CAAE,sDAFZ,CAGE,oBAAoB,CAAEjB,OAAO,CAACC,GAAR,CAAYyC,wBAHpC,CAIE,gBAAgB,CAAExB,WAJpB,GAOE,oBAAC,cAAD,EACE,cAAc,CAAEgB,cADlB,CAEE,WAAW,CAAE5B,WAFf,EAPF,CARF,CAsBE,oBAAC,IAAD,EAAM,cAAc,CAAEE,cAAtB,EAtBF,CADF,CA0BD,EAED,cAAeH,CAAAA,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport ReactMapGL from \"react-map-gl\"\nimport API from \"../utils/API\"\nimport Card from \"../components/Card\"\nimport MapMarkerImage from \"../components/MapMarkerImage\"\nimport NavbarComponent from '../components/NavbarComponent'\nconst RANDOM_NUMBER_KEY = process.env.REACT_APP_RANDOM_API_KEY\nconst RANDOM_REF_KEY = process.env.REACT_APP_RANDOM_API_REF\n\nfunction Home() {\n  // Setting the state\n  const [markerCount, setMarkerCount] = useState([])\n  const [selectedMarker, setSelectedMarker] = useState({})\n  const [searchField, setSearchField] = useState()\n  const [viewport, setViewPort] = useState({\n    // Setting the inital view of the map\n    latitude: 35.5501,\n    longitude: -80.7821,\n    zoom: 1,\n    width: '100vw',\n    height: '60vh'\n  })\n\n  // Functions \n  // =====================================================\n\n  // Grabs the value that was put into the searchbar and sets the state of the searchField to what was typed into the searchbar\n  function handleInputChange(e) {\n    const { value } = e.target\n    setSearchField(value)\n  }\n\n  // Upon the user clicking the 'Search' button use the prevent default to avoid the page refreshing. Then we \n  async function handleFormSubmit(e) {\n    e.preventDefault()\n\n    const { value } = e.target\n     setSearchField(value)\n    // ========================\n     weatherSearch()\n  }\n\n\n  async function weatherSearch() {\n    console.log('searchField: ',searchField)\n  // Takes the value that was put into the searchfiled and returns that many lat and lon points\n    const count = await fetch(`https://randomapi.com/api/?key=${RANDOM_NUMBER_KEY}&ref=${RANDOM_REF_KEY}&results=${searchField}&page=10`)\n    // Converts the response to a json\n    const toJson = await count.json()\n    console.log('toJson: ',toJson)\n    // grab the results key from the json object\n    const latAndLon = await toJson.results\n    console.log('latAndLon: ',latAndLon)\n    // then it will set the state of the MarkerCount to generate that many weather markers on the map. MakerCount is passed as props to the MapMarkerImage component and for every lat and lon point it will generate an image\n    setMarkerCount(latAndLon)\n  }\n  \n  function onMarkerSelect(marker) {\n    // when user selects an image generated from the MapMarkerImage component an API call will be made to the Open weather API to get the weather data from those specific lat and long locations. \n    API.searchWeather(marker.lat, marker.lon)\n      .then(res => {\n        // Then we will pass the weather data for that specific image that was clicked to the selectedMarker state.\n        setSelectedMarker(res.data)\n      })\n  }\n  // ====================================================\n  return (\n    <div>\n      {/* Renders the Navbar component and passes the handleInputChange, handleFormSubmit functions and the searchField state value to the component */}\n      <NavbarComponent\n        handleInputChange={handleInputChange}\n        handleFormSubmit={handleFormSubmit}\n        searchField={searchField}\n      />\n      {/* Renders the ReactMapGL from react-map-gl */}\n      <ReactMapGL\n        {...viewport}\n        mapStyle={\"mapbox://styles/suarez9093/ck773vm2e08i91iqi1m48zfss\"}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API_KEY}\n        onViewportChange={setViewPort}\n      >\n        {/* Renders cloud images to the map */}\n        <MapMarkerImage\n          onMarkerSelect={onMarkerSelect}\n          markerCount={markerCount}\n        />\n      </ReactMapGL>\n\n      {/* Renders the weather data detail of the selected weather Marker */}\n      <Card selectedMarker={selectedMarker} />\n    </div>\n  )\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}