{"version":3,"sources":["utils/API.js","components/CardWeatherDetail.js","components/Card.js","components/MapMarkerImage.js","components/NavbarComponent.js","pages/Home.js","pages/SavedWeatherPoints.js","App.js","serviceWorker.js","index.js"],"names":["lat","lon","URL","axios","get","weatherData","post","id","delete","CardWeatherDetail","props","Card","CardBody","CardTitle","CardSubtitle","country","name","CardText","temp","toFixed","feelsLike","latitude","longitude","Button","className","onClick","event","preventDefault","API","city","dateAdded","Date","now","alert","selectedMarker","main","key","feels_like","coord","sys","MapMarkerImage","markerCount","onMarkerSelect","console","log","map","marker","offsetLeft","offsetTop","icon","faCloud","NavbarComponent","searchField","handleFormSubmit","handleInputChange","type","value","placeholder","onChange","to","Home","useState","setMarkerCount","setSelectedMarker","setSearchField","zoom","width","height","viewport","setViewPort","e","a","target","weatherSearch","fetch","process","count","json","toJson","results","latAndLon","mapStyle","mapboxApiAccessToken","onViewportChange","then","res","data","SavedWeatherPoints","savedWeather","setSavedWeather","useEffect","catch","err","weather","_id","color","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.11b91f72.chunk.js","sourcesContent":["import axios from \"axios\"\nconst endpoint = \"http://api.openweathermap.org/data/2.5/weather?\";\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY\n\nexport default {\n    \n\n    // Search for weather\n    searchWeather: (lat, lon) => {\n        const coordinates = `lat=${lat}&lon=${lon}`\n       \n        const URL = endpoint + coordinates + \"&appid=\" + API_KEY\n     \n        return axios.get(URL);\n    },\n    // Saves weather to the saved weather point page\n    saveWeather: function (weatherData) {\n        return axios.post(\"/api/weather\", weatherData);\n    },\n    // Gets all saved weather\n    getAllWeather: function () {\n        return axios.get(\"/api/weather\");\n    },\n    // Gets the weather with the given id\n    getWeather: function (id) {\n        return axios.get(\"/api/weather/\" + id);\n    },\n    // Deletes the weather with the given id\n    deleteWeather: function (id) {\n        return axios.delete(\"/api/weather/\" + id);\n    }\n};\n\n","\nimport React from 'react';\nimport API from '../utils/API';\nimport {Card,CardText, CardBody,CardTitle, CardSubtitle,Button\n} from 'reactstrap';\n\nfunction CardWeatherDetail(props) {\n\n// When the 'Save this Weather Point' button is clicked\nfunction handleSaveWeather(event){\n  // Prevent defaulft for to prevent the page from rerendering\n  event.preventDefault()\n  // make an axios call to save this weather point to the db\n  API.saveWeather({\n    id: props.id,\n    country: props.country,\n    city: props.name,\n    latitude: props.latitude,\n    longitude: props.longitude,\n    temp: props.temp,\n    feelsLike: props.feelsLike,\n    dateAdded: Date.now()\n  })\n  alert(`Saved ${props.name}!`)\n}\n\n  return (\n    <div>\n      <Card>\n        <CardBody>\n          <CardTitle><strong>Weather Detail</strong></CardTitle>\n          <CardSubtitle><strong>Country:</strong> {props.country}</CardSubtitle>\n          <CardSubtitle><strong>City:</strong> {props.name}</CardSubtitle>\n          <CardText><strong>Temp:</strong> {(((props.temp-273.15)*1.8)+32).toFixed(2)}°</CardText>\n          <CardText><strong>Feels Like:</strong> {(((props.feelsLike-273.15)*1.8)+32).toFixed(2)}°</CardText>\n          <CardText><strong>Latitude:</strong> {props.latitude}</CardText>\n          <CardText><strong>Longitude:</strong> {props.longitude}</CardText>\n          <Button  className=\"btn btn-primary btn-width\"onClick={handleSaveWeather}>Save this Weather Point</Button>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default CardWeatherDetail;\n","import React from 'react';\nimport CardWeatherDetails from \"./CardWeatherDetail\";\n\nfunction Card({ selectedMarker }) {\n    return (\n        <div>\n            {/* If there is a MapMarker Image selected then the CardWeatherDetais Component is rendered and the following information is passed down to the CardWeatherDetails Component */}\n            {selectedMarker.main ?\n                <CardWeatherDetails\n                    key={selectedMarker.id}\n                    id={selectedMarker.id}\n                    name={selectedMarker.name}\n                    temp={selectedMarker.main.temp}\n                    feelsLike={selectedMarker.main.feels_like}\n                    latitude={selectedMarker.coord.lat}\n                    longitude={selectedMarker.coord.lon}\n                    country={selectedMarker.sys.country}\n                    selectedMarker={selectedMarker}\n                    // Otherwise if there is not a selectedMarker then the following tag is rendered\n                /> : <h1>No Location selected</h1>\n            }\n\n        </div>\n    )\n}\n\nexport default Card","import React from 'react';\nimport { Marker } from \"react-map-gl\"\nimport { faCloud } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction MapMarkerImage({ markerCount, onMarkerSelect }) {\n\n    return (\n        <div>\n            {console.log('markerCount: ',markerCount)}\n            {!markerCount ? null :\n                markerCount.map(marker => (\n                    <Marker\n                        key={marker.id}\n                        latitude={marker.lat}\n                        longitude={marker.lon}\n                        offsetLeft={-20}\n                        offsetTop={-10}>\n                        <button onClick={() => onMarkerSelect(marker)}>\n                            <FontAwesomeIcon className=\"font-awesome-icon\" icon={faCloud} />\n                        </button>\n                    </Marker>\n                ))\n            }\n        </div>\n\n    )\n}\n\nexport default MapMarkerImage","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction NavbarComponent({ searchField, handleFormSubmit, handleInputChange }) {\n    return (\n\n        <header>\n            <div className=\"container container-flex\">\n                <div className=\"header-title-container\">\n                    <h1 className=\"header-title\">Weather Point</h1>\n                    <p className=\"header-subtitle\">Generate Random Weather Point data</p>\n                </div>\n                <nav className=\"navigation\">\n                    <ul className=\"navigation-list\">\n                        <li className=\"navigation-list-item\"> <input className=\"\"\n                            type=\"text\" name=\"markerCount\"\n                            value={searchField}\n                            id=\"markerCount\"\n                            placeholder=\"Search up to 10 points\"\n                            onChange={handleInputChange} /></li>\n                        <li className=\"navigation-list-item\"><button className='btn btn-primary' onClick={handleFormSubmit}>Search</button></li>\n                        <li className=\"navigation-list-item\"><Link to=\"/\" className=\"navigation-link\">Home</Link></li>\n                        <li className=\"navigation-list-item\"><Link to=\"/saved\" className=\"navigation-link\">Saved Weather Points</Link></li>\n                    </ul>\n                </nav>\n            </div>\n        </header>\n    )\n}\nexport default NavbarComponent;","import React, { useState } from 'react';\nimport ReactMapGL from \"react-map-gl\"\nimport API from \"../utils/API\"\nimport Card from \"../components/Card\"\nimport MapMarkerImage from \"../components/MapMarkerImage\"\nimport NavbarComponent from '../components/NavbarComponent'\nconst RANDOM_NUMBER_KEY = process.env.REACT_APP_RANDOM_API_KEY\nconst RANDOM_REF_KEY = process.env.REACT_APP_RANDOM_API_REF\n\n\nfunction Home() {\n  // Setting the state\n  const [markerCount, setMarkerCount] = useState([])\n  const [selectedMarker, setSelectedMarker] = useState({})\n  const [searchField, setSearchField] = useState()\n  const [viewport, setViewPort] = useState({\n    // Setting the inital view of the map\n    latitude: 35.5501,\n    longitude: -80.7821,\n    zoom: 1,\n    width: '100vw',\n    height: '60vh'\n  })\n\n  // Functions \n  // =====================================================\n\n  // Grabs the value that was put into the searchbar and sets the state of the searchField to what was typed into the searchbar\n  function handleInputChange(e) {\n    const { value } = e.target\n    setSearchField(value)\n  }\n\n  // Upon the user clicking the 'Search' button use the prevent default to avoid the page refreshing. Then we \n  async function handleFormSubmit(e) {\n    e.preventDefault()\n\n    // Do I need this part? It is defined in the above function\n    const { value } = e.target\n     setSearchField(value)\n    // ========================\n     weatherSearch()\n  }\n\n\n  async function weatherSearch() {\n    console.log('searchField: ',searchField)\n  // Takes the value that was put into the searchfiled and returns that many lat and lon points\n    // const count = await fetch(`https://randomapi.com/api/${RANDOM_REF_KEY}?key=${RANDOM_NUMBER_KEY}&results=${searchField}`)\n    const count = await fetch(`https://randomapi.com/api/?key=${RANDOM_NUMBER_KEY}&ref=${RANDOM_REF_KEY}&results=${searchField}`)\n    // Converts the response to a json\n    const toJson = await count.json()\n    // grab the results key from the json object\n    const latAndLon = await toJson.results\n    // then it will set the state of the MarkerCount to generate that many weather markers on the map. MakerCount is passed as props to the MapMarkerImage component and for every lat and lon point it will generate an image\n    setMarkerCount(latAndLon)\n  }\n  \n  function onMarkerSelect(marker) {\n    // when user selects an image generated from the MapMarkerImage component an API call will be made to the Open weather API to get the weather data from those specific lat and long locations. \n    API.searchWeather(marker.lat, marker.lon)\n      .then(res => {\n        // Then we will pass the weather data for that specific image that was clicked to the selectedMarker state.\n        setSelectedMarker(res.data)\n      })\n  }\n  // ====================================================\n  return (\n    <div>\n      {/* Renders the Navbar component and passes the handleInputChange, handleFormSubmit functions and the searchField state value to the component */}\n      <NavbarComponent\n        handleInputChange={handleInputChange}\n        handleFormSubmit={handleFormSubmit}\n        searchField={searchField}\n      />\n      {/* Renders the ReactMapGL from react-map-gl */}\n      <ReactMapGL\n        {...viewport}\n        mapStyle={\"mapbox://styles/suarez9093/ck773vm2e08i91iqi1m48zfss\"}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API_KEY}\n        onViewportChange={setViewPort}\n      >\n        {/* Renders cloud images to the map */}\n        <MapMarkerImage\n          onMarkerSelect={onMarkerSelect}\n          markerCount={markerCount}\n        />\n      </ReactMapGL>\n\n      {/* Renders the weather data detail of the selected weather Marker */}\n      <Card selectedMarker={selectedMarker} />\n    </div>\n  )\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport API from '../utils/API';\nimport { Card, CardText, CardBody, Button } from 'reactstrap';\nimport NavbarComponent from '../components/NavbarComponent';\n\nfunction SavedWeatherPoints() {\n    const [savedWeather, setSavedWeather] = useState()\n\n    // on first render load run the loadWeather function\n    useEffect(() => {\n        // loadWeather()\n        API.getAllWeather()\n        .then(res => {\n            console.log('res: ',res)\n            setSavedWeather(res.data)\n        })\n        .catch(err => console.log(err))\n    }, [])\n    console.log('savedWeather: ', savedWeather)\n\n    // Makes a call to axios to get all the weather that was saved and save to savedWeather state.\n     function loadWeather() {\n        //  API.getAllWeather()\n        //     .then(res => {\n        //         console.log('res: ',res)\n        //         setSavedWeather(res.data)\n        //     })\n    }\n\n    // make an axios call to delete a weather point\n    function handleDeleteWeather(id) {\n        API.deleteWeather(id).then(res => {\n            loadWeather();\n        })\n        alert('Deleted!')\n    };\n\n    return (\n        <div>\n            <NavbarComponent />\n            {/* If there is no weather points saved in state then component will render this h1 tag */}\n            {!savedWeather ? <h1>No saved Results</h1> :\n            // otherwise the component will map over all the savedWeather saved in state and for everyone in the array it will generate a Card with the following information\n                savedWeather.map(weather => (\n                    <Card key={weather._id}>\n                        <CardBody>\n                            <CardText><strong>Country:</strong> {weather.country}</CardText>\n                            <CardText><strong>City:</strong> {weather.city}</CardText>\n                            {/* Converts to farenheight */}\n                            <CardText><strong>Temp:</strong> {(((weather.temp - 273.15) * 1.8) + 32).toFixed(2)}°</CardText>\n                            <CardText><strong>Feels Like:</strong> {(((weather.feelsLike - 273.15) * 1.8) + 32).toFixed(2)}°</CardText>\n                            <br />\n                            <br />\n                            <Button className=\"btn-width\" color=\"danger\" onClick={() => handleDeleteWeather(weather._id)}>Delete this weather point</Button>\n                        </CardBody>\n                    </Card>\n                ))}\n        </div>\n    )\n}\nexport default SavedWeatherPoints","import React, {Fragment} from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport SavedWeatherPoints from './pages/SavedWeatherPoints';\n\n \nfunction App() {\n  return (\n    <Fragment>\n      <Switch>\n        <Route exact path ='/'><Home /></Route>\n        <Route exact path ='/saved'><SavedWeatherPoints /></Route>\n      </Switch>\n    </Fragment>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}